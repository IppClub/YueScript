do
	(项目) <- 映射 {1,2,3}
	项目 * 2

do
	(项目) <- 映射 _,{1,2,3}
	项目 * 2

do
	(项目) <- 过滤 _, do
		(项目) <- 映射 _,{1,2,3,4}
		项目 * 2
	项目 > 2

do
	(数据) <- 网络?.获取 "测试地址"
	网页体[".结果"]\网页 数据
	(是否处理成功) <- 网络.请求 "测试地址", 数据
	网页体[".结果"]\添加 是否处理成果
	<- 设置超时回调 1000
	打印 "完成"

do
	<- 同步状态
	(错误信息, 数据="nil") <- 异步加载 "文件.yue"
	if 错误信息
		打印 错误信息
		return
	(代码) <- 异步编译 数据
	结果函数 = 加载字符串 代码
	结果函数!

do
	<- 函数1
	<- 函数2
	do
		<- 函数3
		<- 函数4
	<- 函数5
	<- 函数6
	函数7!

do
	:结果,:消息 = do
		(数据) <- 异步接收 "文件名.txt"
		打印 数据
		(信息) <- 异步处理 数据
		检查 信息
	打印 结果, 消息

	总大小 = (for 文件 in *文件数组
		(数据) <- 异步加载 文件
		加入缓存 文件, 数据) |> 合并 0, (对象a, 对象b)-> 对象a + 对象b

属性A = do
	(值) <= 属性定义 => @_值
	打印 "之前值: #{@_值}"
	打印 "最新值: #{值}"
	@_值 = 值

属性B = do
	<= 属性定义 _, (值)=>
		打印 "之前值: #{@_值}"
		打印 "最新值: #{值}"
		@_值 = 值
	@_值

警告 "嗨"

local 变量x, 变量y, 变量z
变量x = do (变量a) < -变量b
变量x, 变量y, 变量z = do (变量a) <- 变量b
变量x, 变量y, 变量z = do (变量a) <-变量b

变量x = do 变量a <= 变量b
变量x, 变量y, 变量z = do (变量a) <= 变量b

nil

